#!/usr/bin/env python3
"""
CLI Interactiva para UCDM
Interfaz de l√≠nea de comandos para consultas interactivas sobre Un Curso de Milagros
"""

import sys
import json
import argparse
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime
import logging

# Importar rich para interfaz mejorada
try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.prompt import Prompt, Confirm
    from rich.table import Table
    from rich.markdown import Markdown
    from rich.text import Text
    HAS_RICH = True
except ImportError:
    HAS_RICH = False

sys.path.append(str(Path(__file__).parent))
from config.settings import *
from training.response_engine import UCDMResponseEngine
from validation.comprehensive_validation_pipeline import ComprehensiveValidationPipeline, PipelineConfig
from validation.quality_report_manager import QualityReportManager

class UCDMCLIInterface:
    """Interfaz CLI interactiva para UCDM"""
    
    def __init__(self):
        self.engine = UCDMResponseEngine()
        self.console = Console() if HAS_RICH else None
        self.setup_logging()
        
        # Inicializar componentes de validaci√≥n
        self.validation_pipeline = None
        self.report_manager = None
        self._initialize_validation_components()
        
    def setup_logging(self):
        """Configurar logging"""
        logging.basicConfig(level=logging.WARNING)  # Solo warnings para CLI
        self.logger = logging.getLogger(__name__)
    
    def _initialize_validation_components(self):
        """Inicializar componentes de validaci√≥n"""
        try:
            config = PipelineConfig(
                enable_text_validation=True,
                enable_lesson_recognition=True,
                enable_structure_validation=True,
                enable_report_generation=True
            )
            self.validation_pipeline = ComprehensiveValidationPipeline(config)
            self.report_manager = QualityReportManager()
            self.logger.info("Componentes de validaci√≥n inicializados")
        except Exception as e:
            self.logger.warning(f"Error inicializando validaci√≥n: {e}")
            self.validation_pipeline = None
            self.report_manager = None
    
    def print_styled(self, text: str, style: str = "default") -> None:
        """Imprimir texto con estilo (con o sin rich)"""
        if self.console and HAS_RICH:
            if style == "title":
                self.console.print(text, style="bold blue")
            elif style == "success":
                self.console.print(text, style="bold green")
            elif style == "error":
                self.console.print(text, style="bold red")
            elif style == "warning":
                self.console.print(text, style="bold yellow")
            elif style == "info":
                self.console.print(text, style="cyan")
            else:
                self.console.print(text)
        else:
            print(text)
    
    def show_welcome_message(self) -> None:
        """Mostrar mensaje de bienvenida"""
        if self.console and HAS_RICH:
            welcome_text = """
# üåü UCDM - Un Curso de Milagros üåü

**Bienvenido al asistente interactivo de Un Curso de Milagros**

Este sistema te permite:
‚Ä¢ üìñ Consultar lecciones espec√≠ficas del Curso
‚Ä¢ üìÖ Obtener la lecci√≥n del d√≠a
‚Ä¢ üîç Explorar conceptos como perd√≥n, amor, paz
‚Ä¢ üåô Reflexiones nocturnas y aplicaciones pr√°cticas
‚Ä¢ ‚ú® Respuestas estructuradas con la metodolog√≠a UCDM

*"Los milagros ocurren naturalmente como expresiones de amor"*
            """
            
            panel = Panel(
                Markdown(welcome_text),
                title="Un Curso de Milagros - CLI",
                border_style="blue"
            )
            self.console.print(panel)
        else:
            print("=" * 60)
            print("üåü UCDM - Un Curso de Milagros üåü")
            print("=" * 60)
            print("\nBienvenido al asistente interactivo de Un Curso de Milagros")
            print("\nEste sistema te permite:")
            print("‚Ä¢ Consultar lecciones espec√≠ficas del Curso")
            print("‚Ä¢ Obtener la lecci√≥n del d√≠a")
            print("‚Ä¢ Explorar conceptos como perd√≥n, amor, paz")
            print("‚Ä¢ Reflexiones nocturnas y aplicaciones pr√°cticas")
            print("‚Ä¢ Respuestas estructuradas con la metodolog√≠a UCDM")
            print("\n\"Los milagros ocurren naturalmente como expresiones de amor\"")
            print("=" * 60)
    
    def show_help_menu(self) -> None:
        """Mostrar men√∫ de ayuda"""
        if self.console and HAS_RICH:
            help_table = Table(title="Comandos Disponibles")
            help_table.add_column("Comando", style="cyan", width=20)
            help_table.add_column("Descripci√≥n", style="white")
            help_table.add_column("Ejemplo", style="green")
            
            commands = [
                ("leccion [n√∫mero]", "Consultar lecci√≥n espec√≠fica", "leccion 1"),
                ("hoy", "Lecci√≥n del d√≠a actual", "hoy"),
                ("concepto [tema]", "Explorar concepto UCDM", "concepto perd√≥n"),
                ("reflexion", "Reflexi√≥n nocturna", "reflexion"),
                ("buscar [texto]", "B√∫squeda libre", "buscar milagros"),
                ("validate [--all]", "Validar calidad del sistema", "validate --all"),
                ("complete [--missing]", "Completar lecciones faltantes", "complete --missing"),
                ("report [--quality]", "Generar reportes de calidad", "report --quality"),
                ("metrics [--dashboard]", "Mostrar m√©tricas del sistema", "metrics --dashboard"),
                ("stats", "Estad√≠sticas del sistema", "stats"),
                ("help", "Mostrar esta ayuda", "help"),
                ("salir", "Salir del programa", "salir")
            ]
            
            for cmd, desc, example in commands:
                help_table.add_row(cmd, desc, example)
            
            self.console.print(help_table)
        else:
            print("\nüìã COMANDOS DISPONIBLES:")
            print("leccion [n√∫mero] - Consultar lecci√≥n espec√≠fica (ej: leccion 1)")
            print("hoy              - Lecci√≥n del d√≠a actual")
            print("concepto [tema]  - Explorar concepto UCDM (ej: concepto perd√≥n)")
            print("reflexion        - Reflexi√≥n nocturna")
            print("buscar [texto]   - B√∫squeda libre (ej: buscar milagros)")
            print("validate [--all] - Validar calidad del sistema")
            print("complete [--missing] - Completar lecciones faltantes")
            print("report [--quality] - Generar reportes de calidad")
            print("metrics [--dashboard] - Mostrar m√©tricas del sistema")
            print("stats            - Estad√≠sticas del sistema")
            print("help             - Mostrar esta ayuda")
            print("salir            - Salir del programa")
    
    def show_system_stats(self) -> None:
        """Mostrar estad√≠sticas del sistema"""
        stats = {
            "lecciones_disponibles": len(self.engine.lessons_index),
            "conceptos_indexados": len(self.engine.concept_index),
            "fecha_carga": datetime.now().strftime("%d/%m/%Y %H:%M")
        }
        
        if self.console and HAS_RICH:
            stats_table = Table(title="Estad√≠sticas del Sistema UCDM")
            stats_table.add_column("M√©trica", style="cyan")
            stats_table.add_column("Valor", style="green")
            
            stats_table.add_row("Lecciones Disponibles", str(stats["lecciones_disponibles"]))
            stats_table.add_row("Conceptos Indexados", str(stats["conceptos_indexados"]))
            stats_table.add_row("√öltima Actualizaci√≥n", stats["fecha_carga"])
            stats_table.add_row("Cobertura", f"{(stats['lecciones_disponibles']/365)*100:.1f}%")
            
            self.console.print(stats_table)
        else:
            print(f"\nüìä ESTAD√çSTICAS DEL SISTEMA:")
            print(f"   Lecciones disponibles: {stats['lecciones_disponibles']}")
            print(f"   Conceptos indexados: {stats['conceptos_indexados']}")
            print(f"   √öltima actualizaci√≥n: {stats['fecha_carga']}")
            print(f"   Cobertura: {(stats['lecciones_disponibles']/365)*100:.1f}%")
    
    def format_response(self, response: str) -> None:
        """Formatear y mostrar respuesta"""
        if self.console and HAS_RICH:
            # Separar la respuesta en secciones
            sections = response.split("**")
            
            for section in sections:
                section = section.strip()
                if not section:
                    continue
                
                if section.startswith("HOOK INICIAL"):
                    self.console.print(f"\nüéØ {section}", style="bold blue")
                elif section.startswith("APLICACI√ìN PR√ÅCTICA"):
                    self.console.print(f"\n‚ö° {section}", style="bold green")
                elif section.startswith("INTEGRACI√ìN EXPERIENCIAL"):
                    self.console.print(f"\nüåø {section}", style="bold cyan")
                elif section.startswith("CIERRE MOTIVADOR"):
                    self.console.print(f"\n‚ú® {section}", style="bold magenta")
                else:
                    self.console.print(section)
        else:
            print(f"\n{response}")
    
    def cmd_validate(self, args: List[str]) -> None:
        """Comando de validaci√≥n del sistema"""
        if not self.validation_pipeline:
            self.print_styled("‚ùå Error: Sistema de validaci√≥n no disponible", "error")
            return
        
        self.print_styled("üîç Iniciando validaci√≥n del sistema UCDM...", "info")
        
        try:
            if "--all" in args:
                # Validaci√≥n completa del sistema
                health_report = self.validation_pipeline.generate_system_health_report()
                
                if self.console and HAS_RICH:
                    panel = Panel(
                        f"Estado: {health_report.get('system_dashboard', {}).get('status', 'DESCONOCIDO')}\n"
                        f"Cobertura: {health_report.get('coverage_metrics', {}).get('coverage_percentage', 0):.1f}%\n"
                        f"Calidad: {health_report.get('quality_analysis', {}).get('executive_summary', {}).get('quality_summary', 'N/A')}",
                        title="‚úÖ Validaci√≥n Completa",
                        border_style="green"
                    )
                    self.console.print(panel)
                else:
                    print("\n‚úÖ VALIDACI√ìN COMPLETA:")
                    dashboard = health_report.get('system_dashboard', {})
                    print(f"   Estado del sistema: {dashboard.get('status', 'DESCONOCIDO')}")
                    print(f"   Cobertura: {health_report.get('coverage_metrics', {}).get('coverage_percentage', 0):.1f}%")
                
            else:
                # Validaci√≥n r√°pida
                if self.report_manager:
                    dashboard = self.report_manager.generate_realtime_dashboard()
                    self.print_styled(f"‚úÖ Estado: {dashboard.get('status', 'DESCONOCIDO')}", "success")
                    sections = dashboard.get('sections', {})
                    overview = sections.get('system_overview', {})
                    print(f"   Cobertura: {overview.get('coverage', 'N/A')}")
                    print(f"   Calidad: {overview.get('quality_score', 'N/A')}")
                    print(f"   Estado: {overview.get('status', 'N/A')}")
                
        except Exception as e:
            self.print_styled(f"‚ùå Error en validaci√≥n: {e}", "error")
    
    def cmd_complete(self, args: List[str]) -> None:
        """Comando para completar lecciones faltantes"""
        if not self.validation_pipeline:
            self.print_styled("‚ùå Error: Sistema de validaci√≥n no disponible", "error")
            return
        
        self.print_styled("üõ†Ô∏è Iniciando completaci√≥n de lecciones...", "info")
        
        try:
            # Identificar lecciones faltantes
            lessons_data = self.engine.lessons_index or {}
            processed_numbers = set(int(k) for k in lessons_data.keys())
            all_lessons = set(range(1, 366))
            missing_lessons = sorted(all_lessons - processed_numbers)
            
            if not missing_lessons:
                self.print_styled("‚úÖ ¬°Excelente! Todas las 365 lecciones est√°n procesadas", "success")
                return
            
            self.print_styled(f"üìä Encontradas {len(missing_lessons)} lecciones faltantes", "warning")
            
            if "--missing" in args:
                # Procesar lecciones faltantes usando el procesador avanzado
                result = self.validation_pipeline.process_missing_lessons(missing_lessons)
                
                success_rate = result.get("success_rate", 0)
                self.print_styled(f"‚úÖ Procesamiento completado: {success_rate:.1f}% √©xito", "success")
                print(f"   Exitosos: {result['successfully_processed']}")
                print(f"   Fallidos: {result['failed_processing']}")
                
                # Mostrar recomendaciones
                recommendations = result.get("recommendations", [])
                if recommendations:
                    print(f"\nüí° Recomendaciones:")
                    for rec in recommendations:
                        print(f"   ‚Ä¢ {rec}")
            else:
                # Solo mostrar estad√≠sticas
                print("   Lecciones faltantes (primeras 10):")
                for lesson in missing_lessons[:10]:
                    print(f"     - Lecci√≥n {lesson}")
                if len(missing_lessons) > 10:
                    print(f"     ... y {len(missing_lessons) - 10} m√°s")
                print("\n   Usa 'complete --missing' para procesarlas")
                print("   O ejecuta: python process_missing_lessons.py")
                
                # Sugerencia adicional
                print(f"\nüí° Para procesamiento completo ejecuta:")
                print(f"   python process_missing_lessons.py")
                print("   O ejecuta: python process_missing_lessons.py")
                
        except Exception as e:
            self.print_styled(f"‚ùå Error en completaci√≥n: {e}", "error")
    
    def cmd_report(self, args: List[str]) -> None:
        """Comando para generar reportes de calidad"""
        if not self.report_manager:
            self.print_styled("‚ùå Error: Sistema de reportes no disponible", "error")
            return
        
        self.print_styled("üìÑ Generando reporte de calidad...", "info")
        
        try:
            if "--quality" in args:
                # Reporte detallado de calidad
                report = self.report_manager.create_quality_report(detailed=True)
                
                if self.console and HAS_RICH:
                    summary = report.get('executive_summary', {})
                    panel = Panel(
                        f"Estado: {summary.get('system_status', 'DESCONOCIDO')}\n"
                        f"Cobertura: {summary.get('coverage_summary', 'N/A')}\n"
                        f"Calidad: {summary.get('quality_summary', 'N/A')}\n\n"
                        f"Hallazgos clave:\n" + "\n".join(f"  ‚Ä¢ {finding}" for finding in summary.get('key_findings', [])),
                        title="üìà Reporte de Calidad",
                        border_style="blue"
                    )
                    self.console.print(panel)
                else:
                    print("\nüìà REPORTE DE CALIDAD:")
                    summary = report.get('executive_summary', {})
                    print(f"   Estado: {summary.get('system_status', 'DESCONOCIDO')}")
                    print(f"   Cobertura: {summary.get('coverage_summary', 'N/A')}")
                    print(f"   Calidad: {summary.get('quality_summary', 'N/A')}")
                    
                    findings = summary.get('key_findings', [])
                    if findings:
                        print("   Hallazgos clave:")
                        for finding in findings:
                            print(f"     ‚Ä¢ {finding}")
            else:
                # Reporte r√°pido
                coverage = self.report_manager.track_coverage_metrics()
                print(f"\nüìà REPORTE R√ÅPIDO:")
                print(f"   Cobertura: {coverage['coverage_percentage']:.1f}%")
                print(f"   Procesadas: {coverage['currently_processed']}/365")
                print(f"   Faltantes: {len(coverage['missing_lessons'])}")
                
        except Exception as e:
            self.print_styled(f"‚ùå Error generando reporte: {e}", "error")
    
    def cmd_metrics(self, args: List[str]) -> None:
        """Comando para mostrar m√©tricas del sistema"""
        if not self.report_manager:
            self.print_styled("‚ùå Error: Sistema de m√©tricas no disponible", "error")
            return
        
        try:
            if "--dashboard" in args:
                # Dashboard completo
                dashboard = self.report_manager.generate_realtime_dashboard()
                
                if self.console and HAS_RICH:
                    # Crear tabla de m√©tricas
                    metrics_table = Table(title="üìà Dashboard UCDM")
                    metrics_table.add_column("M√©trica", style="cyan")
                    metrics_table.add_column("Valor", style="green")
                    
                    sections = dashboard.get('sections', {})
                    overview = sections.get('system_overview', {})
                    quality = sections.get('quality_metrics', {})
                    
                    metrics_table.add_row("Estado", overview.get('status', 'N/A'))
                    metrics_table.add_row("Cobertura", overview.get('coverage', 'N/A'))
                    metrics_table.add_row("Lecciones", overview.get('processed_lessons', 'N/A'))
                    metrics_table.add_row("Calidad General", overview.get('quality_score', 'N/A'))
                    metrics_table.add_row("Legibilidad", quality.get('text_legibility', 'N/A'))
                    metrics_table.add_row("Integridad", quality.get('content_integrity', 'N/A'))
                    
                    self.console.print(metrics_table)
                    
                    # Mostrar alertas si existen
                    alerts = sections.get('alerts', {})
                    if alerts.get('critical', 0) > 0 or alerts.get('warnings', 0) > 0:
                        alert_text = f"Cr√≠ticas: {alerts.get('critical', 0)} | Advertencias: {alerts.get('warnings', 0)}"
                        alert_panel = Panel(alert_text, title="‚ö†Ô∏è Alertas", border_style="red")
                        self.console.print(alert_panel)
                        
                else:
                    print("\nüìà DASHBOARD UCDM:")
                    sections = dashboard.get('sections', {})
                    overview = sections.get('system_overview', {})
                    quality = sections.get('quality_metrics', {})
                    
                    print(f"   Estado: {overview.get('status', 'N/A')}")
                    print(f"   Cobertura: {overview.get('coverage', 'N/A')}")
                    print(f"   Lecciones: {overview.get('processed_lessons', 'N/A')}")
                    print(f"   Calidad: {overview.get('quality_score', 'N/A')}")
                    print(f"   Legibilidad: {quality.get('text_legibility', 'N/A')}")
                    print(f"   Integridad: {quality.get('content_integrity', 'N/A')}")
            else:
                # M√©tricas b√°sicas
                self.show_system_stats()
                
        except Exception as e:
            self.print_styled(f"‚ùå Error mostrando m√©tricas: {e}", "error")
    
    def process_command(self, command: str) -> bool:
        """Procesar comando ingresado. Retorna False si debe salir"""
        command = command.strip().lower()
        
        if not command:
            return True
        
        if command in ['salir', 'exit', 'quit']:
            self.print_styled("\nüôè Que la paz del Curso te acompa√±e. ¬°Hasta pronto!", "success")
            return False
        
        elif command == 'help':
            self.show_help_menu()
        
        elif command == 'stats':
            self.show_system_stats()
        
        elif command == 'hoy':
            self.print_styled("\nüåÖ Consultando la lecci√≥n del d√≠a...", "info")
            result = self.engine.process_query("¬øCu√°l es la lecci√≥n de hoy?")
            self.format_response(result['response'])
        
        elif command == 'reflexion':
            self.print_styled("\nüåô Generando reflexi√≥n nocturna...", "info")
            result = self.engine.process_query("Necesito una reflexi√≥n para antes de dormir")
            self.format_response(result['response'])
        
        elif command.startswith('leccion '):
            try:
                lesson_num = int(command.split()[1])
                if 1 <= lesson_num <= 365:
                    self.print_styled(f"\nüìñ Consultando Lecci√≥n {lesson_num}...", "info")
                    result = self.engine.process_query(f"Expl√≠came la Lecci√≥n {lesson_num}")
                    self.format_response(result['response'])
                else:
                    self.print_styled("‚ùå Error: El n√∫mero de lecci√≥n debe estar entre 1 y 365", "error")
            except (ValueError, IndexError):
                self.print_styled("‚ùå Error: Formato incorrecto. Usa: leccion [n√∫mero]", "error")
        
        elif command.startswith('concepto '):
            concept = ' '.join(command.split()[1:])
            self.print_styled(f"\nüîç Explorando concepto: {concept}...", "info")
            result = self.engine.process_query(f"H√°blame sobre {concept} en UCDM")
            self.format_response(result['response'])
        
        elif command.startswith('buscar '):
            query = ' '.join(command.split()[1:])
            self.print_styled(f"\nüîé Buscando: {query}...", "info")
            result = self.engine.process_query(query)
            self.format_response(result['response'])
        
        elif command.startswith('validate'):
            args = command.split()[1:]
            self.cmd_validate(args)
        
        elif command.startswith('complete'):
            args = command.split()[1:]
            self.cmd_complete(args)
        
        elif command.startswith('report'):
            args = command.split()[1:]
            self.cmd_report(args)
        
        elif command.startswith('metrics'):
            args = command.split()[1:]
            self.cmd_metrics(args)
        
        else:
            # Tratar como consulta libre
            self.print_styled(f"\nüí≠ Procesando consulta...", "info")
            result = self.engine.process_query(command)
            self.format_response(result['response'])
        
        return True
    
    def run_interactive_mode(self) -> None:
        """Ejecutar modo interactivo"""
        self.show_welcome_message()
        
        # Cargar datos del sistema
        self.print_styled("\nüîÑ Cargando datos del sistema...", "info")
        if not self.engine.load_data():
            self.print_styled("‚ùå Error: No se pudieron cargar los datos del sistema", "error")
            self.print_styled("   Aseg√∫rate de haber ejecutado primero los scripts de extracci√≥n", "warning")
            return
        
        self.print_styled("‚úÖ Sistema cargado exitosamente", "success")
        self.print_styled("\nüí° Escribe 'help' para ver los comandos disponibles", "info")
        
        # Loop principal
        while True:
            try:
                if self.console and HAS_RICH:
                    command = Prompt.ask("\n[bold blue]UCDM[/bold blue]", default="help")
                else:
                    command = input("\nUCDM> ").strip()
                
                if not self.process_command(command):
                    break
                    
            except KeyboardInterrupt:
                self.print_styled("\n\nüôè Que la paz del Curso te acompa√±e. ¬°Hasta pronto!", "success")
                break
            except Exception as e:
                self.print_styled(f"\n‚ùå Error inesperado: {str(e)}", "error")
                self.print_styled("üí° Escribe 'help' si necesitas ayuda", "info")

def create_argument_parser():
    """Crear parser de argumentos de l√≠nea de comandos"""
    parser = argparse.ArgumentParser(
        description="CLI Interactiva para Un Curso de Milagros",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:
  python ucdm_cli.py                    # Modo interactivo
  python ucdm_cli.py --leccion 1        # Consultar lecci√≥n espec√≠fica
  python ucdm_cli.py --hoy              # Lecci√≥n del d√≠a
  python ucdm_cli.py --concepto perd√≥n  # Explorar concepto
  python ucdm_cli.py --query "¬øQu√© es el amor?"  # Consulta libre
        """
    )
    
    parser.add_argument('--leccion', '-l', type=int, metavar='N',
                       help='Consultar lecci√≥n espec√≠fica (1-365)')
    
    parser.add_argument('--hoy', action='store_true',
                       help='Mostrar lecci√≥n del d√≠a')
    
    parser.add_argument('--concepto', '-c', type=str, metavar='CONCEPTO',
                       help='Explorar concepto espec√≠fico de UCDM')
    
    parser.add_argument('--reflexion', '-r', action='store_true',
                       help='Generar reflexi√≥n nocturna')
    
    parser.add_argument('--query', '-q', type=str, metavar='CONSULTA',
                       help='Realizar consulta libre')
    
    parser.add_argument('--stats', action='store_true',
                       help='Mostrar estad√≠sticas del sistema')
    
    parser.add_argument('--no-interactive', action='store_true',
                       help='No entrar en modo interactivo despu√©s de ejecutar comando')
    
    return parser

def main():
    """Funci√≥n principal"""
    parser = create_argument_parser()
    args = parser.parse_args()
    
    cli = UCDMCLIInterface()
    
    # Si no hay argumentos, ir directo a modo interactivo
    if len(sys.argv) == 1:
        cli.run_interactive_mode()
        return 0
    
    # Procesar argumentos espec√≠ficos
    if not cli.engine.load_data():
        cli.print_styled("‚ùå Error: No se pudieron cargar los datos del sistema", "error")
        cli.print_styled("   Ejecuta primero: python extraction/pdf_extractor.py", "warning")
        return 1
    
    command_executed = False
    
    if args.stats:
        cli.show_system_stats()
        command_executed = True
    
    if args.hoy:
        cli.print_styled("üåÖ Lecci√≥n del d√≠a:", "title")
        result = cli.engine.process_query("¬øCu√°l es la lecci√≥n de hoy?")
        cli.format_response(result['response'])
        command_executed = True
    
    if args.leccion:
        if 1 <= args.leccion <= 365:
            cli.print_styled(f"üìñ Lecci√≥n {args.leccion}:", "title")
            result = cli.engine.process_query(f"Expl√≠came la Lecci√≥n {args.leccion}")
            cli.format_response(result['response'])
            command_executed = True
        else:
            cli.print_styled("‚ùå Error: El n√∫mero de lecci√≥n debe estar entre 1 y 365", "error")
            return 1
    
    if args.concepto:
        cli.print_styled(f"üîç Concepto: {args.concepto}", "title")
        result = cli.engine.process_query(f"H√°blame sobre {args.concepto} en UCDM")
        cli.format_response(result['response'])
        command_executed = True
    
    if args.reflexion:
        cli.print_styled("üåô Reflexi√≥n nocturna:", "title")
        result = cli.engine.process_query("Necesito una reflexi√≥n para antes de dormir")
        cli.format_response(result['response'])
        command_executed = True
    
    if args.query:
        cli.print_styled(f"üí≠ Consulta: {args.query}", "title")
        result = cli.engine.process_query(args.query)
        cli.format_response(result['response'])
        command_executed = True
    
    # Si se ejecut√≥ un comando y no se especific√≥ --no-interactive, entrar en modo interactivo
    if command_executed and not args.no_interactive:
        cli.print_styled("\n" + "="*50, "info")
        cli.print_styled("üí° Entrando en modo interactivo. Escribe 'salir' para terminar.", "info")
        cli.run_interactive_mode()
    elif not command_executed:
        # Si no se ejecut√≥ ning√∫n comando, mostrar ayuda y entrar en modo interactivo
        parser.print_help()
        cli.print_styled("\nüí° Entrando en modo interactivo...", "info")
        cli.run_interactive_mode()
    
    return 0

if __name__ == "__main__":
    exit(main())